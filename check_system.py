#!/usr/bin/env python3
"""
System check script for Gemma fine-tuning on Mac
"""

import sys
import platform
import subprocess
import json

def check_system():
    """Check system specifications"""
    print("üñ•Ô∏è  –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # Basic system info
    print(f"OS: {platform.system()} {platform.release()}")
    print(f"Architecture: {platform.machine()}")
    print(f"Python: {sys.version.split()[0]}")
    
    # Check if it's Apple Silicon
    if platform.machine() == 'arm64' and platform.system() == 'Darwin':
        print("‚úÖ Apple Silicon –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    else:
        print("‚ö†Ô∏è  –ù–µ Apple Silicon - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ")

def check_memory():
    """Check memory"""
    print("\nüíæ –ü–†–û–í–ï–†–ö–ê –ü–ê–ú–Ø–¢–ò")
    print("=" * 40)
    
    try:
        # Get memory info on macOS
        result = subprocess.run(['sysctl', 'hw.memsize'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            mem_bytes = int(result.stdout.split()[-1])
            mem_gb = mem_bytes / (1024**3)
            print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å: {mem_gb:.1f} GB")
            
            if mem_gb >= 16:
                print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            elif mem_gb >= 8:
                print("‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        else:
            print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏")
    except:
        print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å")

def check_pytorch():
    """Check PyTorch and MPS"""
    print("\nüî• –ü–†–û–í–ï–†–ö–ê PYTORCH –ò MPS")
    print("=" * 40)
    
    try:
        import torch
        print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        
        # Check MPS
        if torch.backends.mps.is_available():
            print("‚úÖ MPS –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            if torch.backends.mps.is_built():
                print("‚úÖ MPS —Å–æ–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è  MPS –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
        else:
            print("‚ùå MPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            
        # Memory test
        try:
            device = "mps" if torch.backends.mps.is_available() else "cpu"
            x = torch.randn(1000, 1000).to(device)
            y = torch.mm(x, x.t())
            print(f"‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ {device} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def check_dependencies():
    """Check required packages"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 40)
    
    required_packages = [
        'torch',
        'transformers', 
        'datasets',
        'peft',
        'accelerate',
        'tokenizers',
        'huggingface_hub'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing.append(package)
    
    if missing:
        print(f"\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing)}")

def check_dataset():
    """Check if dataset exists"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 40)
    
    import os
    dataset_path = "final_training_dataset/kazakh_law_qa_high_quality_20250702_013138.jsonl"
    
    if os.path.exists(dataset_path):
        print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç –Ω–∞–π–¥–µ–Ω")
        
        # Check file size
        size_mb = os.path.getsize(dataset_path) / (1024**2)
        print(f"–†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
        
        # Quick content check
        try:
            with open(dataset_path, 'r', encoding='utf-8') as f:
                first_line = f.readline()
                data = json.loads(first_line)
                print(f"‚úÖ –§–æ—Ä–º–∞—Ç JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
                required_fields = ['instruction', 'output']
                missing_fields = [f for f in required_fields if f not in data]
                if missing_fields:
                    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                else:
                    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
    else:
        print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {dataset_path}")

def check_huggingface():
    """Check Hugging Face access"""
    print("\nü§ó –ü–†–û–í–ï–†–ö–ê HUGGING FACE")
    print("=" * 40)
    
    try:
        from huggingface_hub import HfApi
        api = HfApi()
        
        # Check if logged in
        try:
            user = api.whoami()
            print(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫: {user['name']}")
        except:
            print("‚ö†Ô∏è  –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Hugging Face")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: huggingface-cli login")
            
    except ImportError:
        print("‚ùå huggingface_hub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def estimate_training_time():
    """Estimate training time"""
    print("\n‚è∞ –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    # Read dataset size
    dataset_path = "final_training_dataset/kazakh_law_qa_high_quality_20250702_013138.jsonl"
    
    try:
        with open(dataset_path, 'r', encoding='utf-8') as f:
            lines = sum(1 for _ in f)
        
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {lines}")
        
        # Rough estimates for Mac M1 Pro
        estimates = {
            "Gemma 2B (—Ç–µ—Å—Ç, 500 –æ–±—Ä–∞–∑—Ü–æ–≤)": "1-2 —á–∞—Å–∞",
            "Gemma 2B (–ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)": f"{lines//500 * 2}-{lines//500 * 3} —á–∞—Å–æ–≤", 
            "Gemma 4B (–ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)": f"{lines//250 * 2}-{lines//250 * 4} —á–∞—Å–æ–≤"
        }
        
        for model, time in estimates.items():
            print(f"‚Ä¢ {model}: ~{time}")
            
    except:
        print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")

def main():
    """Run all checks"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø GEMMA")
    print("=" * 60)
    
    check_system()
    check_memory()
    check_pytorch()
    check_dependencies()
    check_dataset()
    check_huggingface()
    estimate_training_time()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì")
    print("=" * 60)
    print("–ï—Å–ª–∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ, –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!")
    print("–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚ö†Ô∏è  –∏–ª–∏ ‚ùå - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º")

if __name__ == "__main__":
    main() 