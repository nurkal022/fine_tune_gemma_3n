#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –ø—Ä–∞–≤–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
"""

import requests
import json
import time

class LegalAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø—Ä–∞–≤–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
    
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def ask_question(self, question, max_tokens=512, temperature=0.7):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API"""
        
        payload = {
            "question": question,
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/ask",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            return {"error": f"API Error: {e}"}
    
    def get_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=5)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"Health check failed: {e}"}

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Å–µ—Ä–≤–µ—Ä—É...")
    
    client = LegalAPIClient()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    health = client.get_health()
    if "error" in health:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {health['error']}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python api_server.py")
        return
    
    print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {health}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = [
        "–¢–û–û “õ“±—Ä—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π “õ“±–∂–∞—Ç—Ç–∞—Ä “õ–∞–∂–µ—Ç?",
        "–ï“£–±–µ–∫—à—ñ–Ω—ñ –∂“±–º—ã—Å—Ç–∞–Ω —à—ã“ì–∞—Ä—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π –Ω–µ–≥—ñ–∑–¥–µ—Ä –±–∞—Ä?",
        "–ñ–µ–∫–µ –∫”ô—Å—ñ–ø–∫–µ—Ä —Ä–µ—Ç—ñ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π —à–∞—Ä—Ç—Ç–∞—Ä –±–∞—Ä?"
    ]
    
    print("\n" + "="*60)
    print("üìã –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –ö–õ–ò–ï–ù–¢–ê")
    print("="*60)
    
    for i, question in enumerate(questions, 1):
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å {i}: {question}")
        print("-" * 50)
        
        start_time = time.time()
        result = client.ask_question(question)
        end_time = time.time()
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫")
            print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {result.get('tokens_used', 'N/A')}")
        
        print("-" * 50)
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
