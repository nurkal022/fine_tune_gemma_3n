#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
"""

import sys
import os
import json
import time
from typing import List, Dict

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from gemma_legal_model import KazakhLegalModel

class BatchProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.model = KazakhLegalModel()
        self.results = []
    
    def process_questions(self, questions: List[str]) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        for i, question in enumerate(questions, 1):
            print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}/{len(questions)}: {question[:50]}...")
            
            start_time = time.time()
            
            try:
                answer = self.model.ask(question)
                processing_time = time.time() - start_time
                
                result = {
                    "question": question,
                    "answer": answer,
                    "processing_time": processing_time,
                    "success": True,
                    "error": None
                }
                
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫")
                
            except Exception as e:
                processing_time = time.time() - start_time
                
                result = {
                    "question": question,
                    "answer": None,
                    "processing_time": processing_time,
                    "success": False,
                    "error": str(e)
                }
                
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            self.results.append(result)
        
        return self.results
    
    def save_results(self, filename: str = "batch_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        total = len(self.results)
        successful = sum(1 for r in self.results if r['success'])
        failed = total - successful
        
        total_time = sum(r['processing_time'] for r in self.results)
        avg_time = total_time / total if total > 0 else 0
        
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*60)
        print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫/–≤–æ–ø—Ä–æ—Å")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful/total*100:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_questions = [
        "–¢–û–û “õ“±—Ä—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π “õ“±–∂–∞—Ç—Ç–∞—Ä “õ–∞–∂–µ—Ç?",
        "–ï“£–±–µ–∫—à—ñ–Ω—ñ –∂“±–º—ã—Å—Ç–∞–Ω —à—ã“ì–∞—Ä—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π –Ω–µ–≥—ñ–∑–¥–µ—Ä –±–∞—Ä?",
        "–ñ–µ–∫–µ –∫”ô—Å—ñ–ø–∫–µ—Ä —Ä–µ—Ç—ñ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π —à–∞—Ä—Ç—Ç–∞—Ä –±–∞—Ä?",
        "“ö–∞–Ω–¥–∞–π –∂–∞“ì–¥–∞–π–¥–∞ –∂“±–º—ã—Å –±–µ—Ä—É—à—ñ –µ“£–±–µ–∫—à—ñ–≥–µ –∞–π—ã–ø–ø“±–ª —Å–∞–ª–∞ –∞–ª–∞–¥—ã?",
        "–ú–µ–Ω—à—ñ–∫ “õ“±“õ—ã“ì—ã “õ–∞–ª–∞–π —Ç—ñ—Ä–∫–µ–ª–µ–¥—ñ?",
        "“ö–∞–Ω–¥–∞–π –∂–∞“ì–¥–∞–π–¥–∞ –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç—Ç—ã –±“±–∑—É“ì–∞ –±–æ–ª–∞–¥—ã?",
        "–ñ–∞–ª–∞“õ—ã–Ω—ã “õ–∞–Ω–¥–∞–π –º–µ—Ä–∑—ñ–º–¥–µ —Ç”©–ª–µ—É –∫–µ—Ä–µ–∫?",
        "–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã “õ–∞–Ω—à–∞ —Å–∞“ì–∞—Ç –±–æ–ª—É—ã –∫–µ—Ä–µ–∫?",
        "–ï“£–±–µ–∫ –¥–µ–º–∞–ª—ã—Å—ã “õ–∞–Ω—à–∞ –∫“Ø–Ω?",
        "–ñ“±–º—ã—Å –±–µ—Ä—É—à—ñ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—Ç–µ—Ä—ñ “õ–∞–Ω–¥–∞–π?"
    ]
    
    print("üá∞üáø –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    processor = BatchProcessor()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    results = processor.process_questions(test_questions)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    processor.save_results("examples/batch_test_results.json")
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    processor.print_summary()
    
    print("\n‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
