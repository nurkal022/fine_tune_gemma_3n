#!/usr/bin/env python3
"""
Test script for fine-tuned Gemma 3 4B model with MLX
"""

import sys
from mlx_lm import load, generate

def test_model():
    """Test the fine-tuned model"""
    try:
        print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ Gemma 3 4B —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏...")
        
        # Load model with adapters
        model, tokenizer = load(
            "google/gemma-3-4b-it",
            adapter_path="./checkpoints"
        )
        
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ú–æ–¥–µ–ª—å: {model}")
        
        # Test questions
        questions = [
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¢–û–û –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?",
            "–ö–∞–∫–æ–≤–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –†–ö?", 
            "–ö–∞–∫–∏–µ –Ω–∞–ª–æ–≥–∏ –æ–±—è–∑–∞–Ω–æ –ø–ª–∞—Ç–∏—Ç—å –¢–û–û –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?",
            "–ö—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–º –¢–û–û –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–ö?"
        ]
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ...")
        print("=" * 60)
        
        for i, question in enumerate(questions, 1):
            print(f"\n{i}. üìù –í–æ–ø—Ä–æ—Å: {question}")
            print("-" * 50)
            
            # Format prompt for Gemma
            prompt = f"<bos><start_of_turn>user\n{question}<end_of_turn>\n<start_of_turn>model\n"
            
            try:
                # Generate response
                response = generate(
                    model, 
                    tokenizer, 
                    prompt=prompt, 
                    max_tokens=200
                )
                
                # Extract only the model's response
                if "<start_of_turn>model\n" in response:
                    answer = response.split("<start_of_turn>model\n")[-1]
                    if "<end_of_turn>" in answer:
                        answer = answer.split("<end_of_turn>")[0]
                else:
                    answer = response
                
                print(f"ü§ñ –û—Ç–≤–µ—Ç: {answer.strip()}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                continue
                
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False
        
    return True

def interactive_mode():
    """Interactive chat mode"""
    try:
        print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
        model, tokenizer = load(
            "google/gemma-3-4b-it",
            adapter_path="./checkpoints"
        )
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!\n")
        
        while True:
            question = input("üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            
            if question.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not question:
                continue
                
            prompt = f"<bos><start_of_turn>user\n{question}<end_of_turn>\n<start_of_turn>model\n"
            
            try:
                response = generate(
                    model, 
                    tokenizer, 
                    prompt=prompt, 
                    max_tokens=300
                )
                
                # Extract model response
                if "<start_of_turn>model\n" in response:
                    answer = response.split("<start_of_turn>model\n")[-1]
                    if "<end_of_turn>" in answer:
                        answer = answer.split("<end_of_turn>")[0]
                else:
                    answer = response
                    
                print(f"\nü§ñ {answer.strip()}\n")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "interactive":
        interactive_mode()
    else:
        test_model() 