#!/usr/bin/env python3
"""
Helper script to guide through Gemma access setup
"""

import webbrowser
import os
import sys

def check_hf_login():
    """Check if user is logged into HuggingFace"""
    try:
        from huggingface_hub import HfApi
        api = HfApi()
        user = api.whoami()
        print(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user['name']}")
        return True
    except:
        print("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ HuggingFace")
        return False

def check_model_access():
    """Check if user has access to Gemma models"""
    try:
        from transformers import AutoTokenizer
        tokenizer = AutoTokenizer.from_pretrained("google/gemma-3-1b-it")
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ google/gemma-3-1b-it –ø–æ–ª—É—á–µ–Ω")
        return True
    except Exception as e:
        if "gated repo" in str(e).lower():
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ google/gemma-3-1b-it")
            return False
        else:
            print(f"‚ùì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False

def open_gemma_page():
    """Open Gemma model page in browser"""
    print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Gemma –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
    webbrowser.open("https://huggingface.co/google/gemma-3-1b-it")

def login_to_hf():
    """Guide user through HF login"""
    print("\nüîë –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ HuggingFace:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://huggingface.co/settings/tokens")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ —á—Ç–µ–Ω–∏—è (Read)")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
    print("4. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ")
    print("\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("huggingface-cli login")

def main():
    """Main setup wizard"""
    print("üèõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –î–û–°–¢–£–ü–ê –ö GEMMA 3 1B")
    print("=" * 50)
    
    print("\n–ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    
    # Check HF login
    hf_logged_in = check_hf_login()
    
    # Check model access
    model_access = False
    if hf_logged_in:
        model_access = check_model_access()
    
    print("\n" + "="*50)
    print("üìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print("="*50)
    
    step = 1
    
    if not hf_logged_in:
        print(f"{step}. üîë –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –í HUGGINGFACE")
        login_to_hf()
        step += 1
        print()
    
    if not model_access:
        print(f"{step}. üìù –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ê –ö GEMMA")
        print("   a) –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–∏ (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        print("   b) –ù–∞–∂–º–∏—Ç–µ 'Agree and access repository'")
        print("   c) –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)")
        
        try:
            open_gemma_page()
        except:
            print("   –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: https://huggingface.co/google/gemma-3-1b-it")
        
        step += 1
        print()
    
    if hf_logged_in and model_access:
        print("‚úÖ –í–°–ï –ì–û–¢–û–í–û! –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:")
        print()
        print("   MLX (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
        print("   python fine_tune_gemma_mlx.py")
        print()
        print("   PyTorch:")
        print("   python fine_tune_gemma_local.py")
        return
    
    print(f"{step}. ‚úÖ –ü–†–û–í–ï–†–ö–ê")
    print("   –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("   python setup_gemma_access.py")
    print()
    
    print("üí° –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:")
    print("   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md")
    print("   üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: TRAINING_INSTRUCTIONS.md")
    print("   ü§ó HuggingFace Tokens: https://huggingface.co/settings/tokens")
    print("   üèõÔ∏è  Gemma 3 1B: https://huggingface.co/google/gemma-3-1b-it")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑") 